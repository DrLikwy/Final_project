import telebot
from telebot import types
import emoji
import random
import emoji
from PIL import Image


class random_field:
    def __init__(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è –±–æ—è
        self.empty_square = '0'
        self.filled_square = '1'
        self.field_1 = [[self.empty_square for _ in range(-1, 11)] for _ in range(-1, 11)]
        self.field = [[self.empty_square for _ in range(10)] for _ in range(10)]

        # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π —Å –∏—Ö —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        self.ships = {'–ê–≤–∏–∞–Ω–æ—Å–µ—Ü': 1,
                      '–õ–∏–Ω–∫–æ—Ä': 1,
                      '–ö—Ä–µ–π—Å–µ—Ä': 1,
                      '–≠—Å–º–∏–Ω–µ—Ü': 3,
                      '–ö–∞—Ç–µ—Ä': 4}

        # –†–∞–∑–º–µ—Ä—ã –∫–æ—Ä–∞–±–ª–µ–π
        self.ship_sizes = {'–ê–≤–∏–∞–Ω–æ—Å–µ—Ü': 4,
                           '–õ–∏–Ω–∫–æ—Ä': 3,
                           '–ö—Ä–µ–π—Å–µ—Ä': 3,
                           '–≠—Å–º–∏–Ω–µ—Ü': 2,
                           '–ö–∞—Ç–µ—Ä': 1}

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —è—á–µ–µ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
    def check_valid_position(self, field, row, col, size, direction):
        if direction == '–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ':
            for i in range(size):
                if row + i >= len(field) \
                        or self.field_1[row + i][col] != self.empty_square or self.field_1[row + i - 1][
                    col] != self.empty_square or self.field_1[row + i + 1][col] != self.empty_square \
                        or self.field_1[row + i][col + 1] != self.empty_square or self.field_1[row + i - 1][
                    col + 1] != self.empty_square or self.field_1[row + i + 1][col + 1] != self.empty_square \
                        or self.field_1[row + i + 1][col - 1] != self.empty_square or self.field_1[row + i - 1][
                    col - 1] != self.empty_square \
                        or self.field_1[row + i][col - 1] != self.empty_square:
                    return False
        elif direction == '–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ':
            for i in range(size):
                if col + i >= len(field) or self.field[row][col + i] != self.empty_square or self.field_1[row][
                    col + i - 1] != self.empty_square \
                        or self.field_1[row][col + i + 1] != self.empty_square or self.field_1[row + 1][
                    col + i] != self.empty_square \
                        or self.field_1[row + 1][col + i - 1] != self.empty_square or self.field_1[row + 1][
                    col + i + 1] != self.empty_square \
                        or self.field_1[row - 1][col + i] != self.empty_square or self.field_1[row - 1][
                    col + i + 1] != self.empty_square \
                        or self.field_1[row - 1][col + i - 1] != self.empty_square:
                    return False
        return True

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª–µ
    def place_ship(self, field, row, col, size, direction):
        if direction == '–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ':
            for i in range(size):
                self.field[row + i][col] = self.filled_square
                self.field_1[row + i][col] = self.filled_square
        elif direction == '–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ':
            for i in range(size):
                self.field[row][col + i] = self.filled_square
                self.field_1[row][col + i] = self.filled_square
        return self.field

    def save_field(self):
        with open("field.txt", "w") as file:
            for row in self.field:
                for col in row:
                    file.write(' '.join(col))
                file.write('\n')



    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –ø–æ–ª–µ
    def place_ships(self):
        for ship, count in self.ships.items():
            for i in range(count):
                size = self.ship_sizes[ship]
                while True:
                    row = random.randint(0, 9)
                    col = random.randint(0, 9)
                    direction = random.choice(['–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ', '–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ'])
                    if self.check_valid_position(self.field, row, col, size, direction):
                        self.field = self.place_ship(self.field, row, col, size, direction)
                        break
        self.save_field()
        # –í—ã–≤–æ–¥ –ø–æ–ª—è –±–æ—è —Å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏


# –ó–¥–µ—Å—å –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞

bot = telebot.TeleBot('6214557143:AAF9wrgPduSyDvYCJrmiaizbiahJwbDPem4')


@bot.message_handler(commands=['start'])
def start(message):
    hello_mess = f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.username}</b>'
    enter_game_mess = f'–¢–≤–æ—è –∂–∏–∑–Ω—å –∫—Ä–∞–π–Ω–µ —Å–∫—É—á–Ω–∞—è –∏ —É—Ç–æ–º–ª—è—é—â–∞—è? –ù–∏–∫—Ç–æ –∏–∑ –¥—Ä—É–∑–µ–π –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –∏–∑-–∑–∞ —Å–µ—Å—Å–∏–∏?' \
                      f'' \
                      f' –¢–æ–≥–¥–∞ —Ç—ã –ø–æ–ø–∞–ª –ø–æ –∞–¥—Ä–µ—Å—É! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–±–µ –∞–±—Å—Ç—Ä–∞–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç –æ–∫—Ä—É–∂–∞—é—â–µ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–µ—Ç—Å—Ç–≤–æ.'
    enter_game_mess += emoji.emojize(':magic_wand:')
    next_point_mess = f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏ GO'
    bot.send_message(message.chat.id, hello_mess, parse_mode='html')
    bot.send_message(message.chat.id, enter_game_mess)
    bot.send_message(message.chat.id, next_point_mess)


@bot.message_handler(content_types=['text'])
def get_user_text(message):
    if message.text == 'GO':
        photo = open('–ü—Ä–∞–≤–∏–ª–∞.jpg', 'rb')
        bot.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:')
        bot.send_photo(message.chat.id, photo)

        markup = types.ReplyKeyboardMarkup()
        start = types.KeyboardButton('START')
        markup.add(start)
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–ª –ø—Ä–∞–≤–∏–ª–∞, –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä—É', parse_mode='html', reply_markup=markup)

    if message.text == 'START':
        our_ship = random_field()
        our_ship.place_ships()
        field_message = ''
        bot.send_message(message.chat.id, '–ú—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–≤–æ–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π')
        field_message = emoji.emojize(':black_large_square:') + "üÑ∞ üÑ± üÑ≤ üÑ≥ üÑ¥ üÑµ üÑ∂ üÑ∑ üÑ∏ üÑπ" + '\n'
        line_number = 0
        with open("field.txt", "r") as file:
            lines = file.readlines()
            for line in lines:

                line_number += 1
                field_message +=emoji.emojize(':keycap_'+str(line_number)+':')
                for i in line:
                    if i == '0':
                        field_message += emoji.emojize(':black_large_square:')
                    elif i == '1':
                        field_message += emoji.emojize(':black_square_button:')
                    else:
                        field_message += i
        bot.send_message(message.chat.id, field_message)

bot.polling(none_stop=True)
